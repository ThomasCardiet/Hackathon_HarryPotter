[{"/Users/thomas/Developer/hackathon_hp/pages/_app.tsx":"1","/Users/thomas/Developer/hackathon_hp/pages/_document.tsx":"2","/Users/thomas/Developer/hackathon_hp/pages/api/hello.ts":"3","/Users/thomas/Developer/hackathon_hp/pages/api/socket.js":"4","/Users/thomas/Developer/hackathon_hp/pages/create-party/[roomId].js":"5","/Users/thomas/Developer/hackathon_hp/pages/create-party/index.js":"6","/Users/thomas/Developer/hackathon_hp/pages/party/[roomId].js":"7","/Users/thomas/Developer/hackathon_hp/components/Choice/index.js":"8","/Users/thomas/Developer/hackathon_hp/components/Compteur/index.js":"9","/Users/thomas/Developer/hackathon_hp/components/CountDown/index.js":"10","/Users/thomas/Developer/hackathon_hp/components/Default/index.js":"11","/Users/thomas/Developer/hackathon_hp/components/DraggableIngredient/index.js":"12","/Users/thomas/Developer/hackathon_hp/components/DropBlock/index.js":"13","/Users/thomas/Developer/hackathon_hp/components/Home/index.js":"14","/Users/thomas/Developer/hackathon_hp/components/Hooks/index.js":"15","/Users/thomas/Developer/hackathon_hp/components/Icon/icons/plus.js":"16","/Users/thomas/Developer/hackathon_hp/components/Icon/index.js":"17","/Users/thomas/Developer/hackathon_hp/components/JoinParty/index.js":"18","/Users/thomas/Developer/hackathon_hp/components/Login/LoginForm.tsx":"19","/Users/thomas/Developer/hackathon_hp/components/Login/dist/LoginForm.js":"20","/Users/thomas/Developer/hackathon_hp/components/Login/index.js":"21","/Users/thomas/Developer/hackathon_hp/components/Party/index.js":"22","/Users/thomas/Developer/hackathon_hp/components/UserBadge/UserBadge.js":"23","/Users/thomas/Developer/hackathon_hp/components/ViewRoom/index.js":"24","/Users/thomas/Developer/hackathon_hp/components/Waiting/index.js":"25","/Users/thomas/Developer/hackathon_hp/components/buttons/PrimaryButton.tsx":"26","/Users/thomas/Developer/hackathon_hp/components/buttons/dist/PrimaryButton.js":"27","/Users/thomas/Developer/hackathon_hp/components/inputs/TextInput.tsx":"28","/Users/thomas/Developer/hackathon_hp/components/inputs/dist/TextInput.js":"29","/Users/thomas/Developer/hackathon_hp/components/sparkles/sparkles.tsx":"30","/Users/thomas/Developer/hackathon_hp/pages/[[...slug]].js":"31"},{"size":1260,"mtime":1677149681402,"results":"32","hashOfConfig":"33"},{"size":231,"mtime":1676884357336,"results":"34","hashOfConfig":"33"},{"size":307,"mtime":1676884357336,"results":"35","hashOfConfig":"33"},{"size":3253,"mtime":1677164067185,"results":"36","hashOfConfig":"33"},{"size":2663,"mtime":1677163086796,"results":"37","hashOfConfig":"33"},{"size":1009,"mtime":1677155292608,"results":"38","hashOfConfig":"33"},{"size":1888,"mtime":1677163086796,"results":"39","hashOfConfig":"33"},{"size":2782,"mtime":1677149681394,"results":"40","hashOfConfig":"33"},{"size":5598,"mtime":1677149681394,"results":"41","hashOfConfig":"33"},{"size":1434,"mtime":1677149681395,"results":"42","hashOfConfig":"33"},{"size":121,"mtime":1677055332966,"results":"43","hashOfConfig":"33"},{"size":2666,"mtime":1677149681395,"results":"44","hashOfConfig":"33"},{"size":458,"mtime":1677054944818,"results":"45","hashOfConfig":"33"},{"size":2996,"mtime":1677149681396,"results":"46","hashOfConfig":"33"},{"size":757,"mtime":1677054944818,"results":"47","hashOfConfig":"33"},{"size":350,"mtime":1676906824589,"results":"48","hashOfConfig":"33"},{"size":68,"mtime":1676906824589,"results":"49","hashOfConfig":"33"},{"size":3528,"mtime":1677156735384,"results":"50","hashOfConfig":"33"},{"size":2864,"mtime":1677165397809,"results":"51","hashOfConfig":"33"},{"size":311,"mtime":1677149681397,"results":"52","hashOfConfig":"33"},{"size":1469,"mtime":1677149681397,"results":"53","hashOfConfig":"33"},{"size":13967,"mtime":1677163086795,"results":"54","hashOfConfig":"33"},{"size":1871,"mtime":1677155292606,"results":"55","hashOfConfig":"33"},{"size":3311,"mtime":1677164067185,"results":"56","hashOfConfig":"33"},{"size":477,"mtime":1677149681398,"results":"57","hashOfConfig":"33"},{"size":244,"mtime":1676898333663,"results":"58","hashOfConfig":"33"},{"size":235,"mtime":1676906824590,"results":"59","hashOfConfig":"33"},{"size":300,"mtime":1676898333663,"results":"60","hashOfConfig":"33"},{"size":328,"mtime":1676906824590,"results":"61","hashOfConfig":"33"},{"size":12733,"mtime":1676990607855,"results":"62","hashOfConfig":"33"},{"size":1543,"mtime":1677165815578,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9vgrar",{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/thomas/Developer/hackathon_hp/pages/_app.tsx",[],[],"/Users/thomas/Developer/hackathon_hp/pages/_document.tsx",[],[],"/Users/thomas/Developer/hackathon_hp/pages/api/hello.ts",[],[],"/Users/thomas/Developer/hackathon_hp/pages/api/socket.js",[],[],"/Users/thomas/Developer/hackathon_hp/pages/create-party/[roomId].js",["168","169","170"],[],"import { Api } from '@/api';\nimport { ViewRoom } from '@/components/ViewRoom';\nimport { Waiting } from '@/components/Waiting';\nimport { useRouter } from 'next/router';\nimport { Router } from '@/router';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport io from 'Socket.IO-client';\n\nconst MAX_USER_PER_ROOM = 2;\n\nconst Create = () => {\n  const router = useRouter();\n  const { roomId } = router.query;\n\n  // SOCKET STATES\n  const [user, setUser] = useState(null);\n  const [room, setRoom] = useState(null);\n  const [partyCanStart, setPartyCanStart] = useState(false);\n  const [socket, setSocket] = useState(null);\n\n  // GET USERS FROM API\n  useEffect(() => {\n    setUser(Api.getLoggedUser());\n  }, []);\n\n  // SOCKETS\n  useEffect(() => {\n    socketInitializer();\n  }, []);\n\n  const socketInitializer = async () => {\n    await fetch('/api/socket');\n    const socket = io();\n    setSocket(socket);\n\n    socket.on('connect', () => {});\n\n    // SET ROOM\n    socket.on('setRoom', ({ room }) => {\n      setRoom(room);\n    });\n\n    // UPDATE ROOM\n    socket.on('updateRoom', ({ newRoom }) => {\n      if (newRoom.id === parseInt(roomId)) {\n        setRoom(newRoom);\n        if (newRoom.users.length >= MAX_USER_PER_ROOM) setPartyCanStart(true);\n      }\n    });\n\n    // REDIRECT TO PARTY\n    socket.on('redirectToParty', (id) => {\n      if (parseInt(roomId) === parseInt(id)) router.push(`/party/${roomId}`);\n    });\n  };\n\n  const getRoom = () => {\n    if (socket && roomId) {\n      socket.emit('getRoomById', roomId);\n    }\n  };\n\n  useEffect(() => {\n    getRoom();\n  }, [socket, roomId]);\n\n  useEffect(() => {\n    if (room && user) {\n      if (room.users.length <= MAX_USER_PER_ROOM) {\n        if (room.owner.id !== user.id && socket) {\n          socket.emit('addUserToRoom', { user, roomId });\n          getRoom();\n        }\n      } else if (\n        !room.users.find(\n          (roomUser) => parseInt(roomUser.id) === parseInt(user.id)\n        )\n      ) {\n        toast.error(\n          `Le nombre maximum de joueurs par partie est ${MAX_USER_PER_ROOM}`,\n          {\n            icon: '🧙',\n            theme: 'light',\n          }\n        );\n        router.push(Router.getRoutes().CHOICE.slug);\n      }\n    }\n  }, [room, user, socket]);\n\n  // START GAME\n  const startGame = () => {\n    if (socket) socket.emit('startGame', roomId);\n  };\n\n  if (!roomId || !user || !room) return <Waiting />;\n\n  return (\n    <ViewRoom\n      setUser={setUser}\n      user={user}\n      socket={socket}\n      room={room}\n      partyCanStart={partyCanStart}\n      startGame={startGame}\n    />\n  );\n};\n\nexport default Create;\n","/Users/thomas/Developer/hackathon_hp/pages/create-party/index.js",["171","172"],[],"import { Waiting } from '@/components/Waiting';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { Api } from '../../api';\nimport io from 'Socket.IO-client';\n\nconst CreateParty = () => {\n  // SOCKET STATES\n  const [user, setUser] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const router = useRouter();\n\n  // GET USERS FROM API\n  useEffect(() => {\n    setUser(Api.getLoggedUser());\n  }, []);\n\n  // SOCKETS\n  useEffect(() => {\n    socketInitializer();\n  }, []);\n\n  const socketInitializer = async () => {\n    await fetch('/api/socket');\n    const socket = io();\n    setSocket(socket);\n\n    socket.on('connect', () => {});\n    socket.on('redirectRoom', ({ user, room }) => {\n      router.push(`/create-party/${room.id}`);\n    });\n  };\n\n  const createParty = () => {\n    if (socket) {\n      socket.emit('createParty', user);\n    }\n  };\n\n  useEffect(() => {\n    createParty();\n  }, [socket]);\n\n  return <Waiting />;\n};\n\nexport default CreateParty;\n","/Users/thomas/Developer/hackathon_hp/pages/party/[roomId].js",["173","174","175"],[],"import { Party } from '@/components/Party';\nimport { useRouter } from 'next/router';\nimport { Waiting } from '@/components/Waiting';\nimport React, { useEffect, useState } from 'react';\nimport { Api } from '@/api';\nimport io from 'Socket.IO-client';\nimport { Router } from '@/router';\n\nconst PlayParty = () => {\n  const router = useRouter();\n  const { roomId } = router.query;\n\n  // SOCKET STATES\n  const [user, setUser] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [room, setRoom] = useState(null);\n\n  // GET USER FROM API\n  useEffect(() => {\n    // REDIRECT NOT LOGGED\n    if (!Api.isLoggedUser()) router.push(Router.getRoutes().LOGIN.slug);\n    setUser(Api.getLoggedUser());\n  }, []);\n\n  // SOCKETS\n  useEffect(() => {\n    socketInitializer();\n  }, []);\n\n  const socketInitializer = async () => {\n    await fetch('/api/socket');\n    const socket = io();\n    setSocket(socket);\n\n    socket.on('connect', () => {});\n\n    // SET ROOM\n    socket.on('setRoom', ({ room }) => {\n      if (\n        room.started &&\n        !room.users.find((roomUser) => roomUser.id === Api.getLoggedUser().id)\n      )\n        return router.push(Router.getRoutes().CHOICE.slug);\n      setWinner(room.winner);\n      setRoom(room);\n    });\n\n    socket.on('sendWinner', ({ rId, winner }) => {\n      if (parseInt(roomId) === parseInt(rId) && winner) {\n        setWinner(winner);\n      }\n    });\n  };\n\n  const getRoom = () => {\n    if (socket && roomId) {\n      socket.emit('getRoomById', roomId);\n    }\n  };\n\n  const stopGame = () => {\n    if (socket && roomId && user) {\n      socket.emit('stopGame', { roomId, winner: user });\n    }\n  };\n\n  useEffect(() => {\n    getRoom();\n  }, [socket, roomId]);\n\n  if (!user || !room) return <Waiting />;\n\n  return <Party user={user} stopGame={stopGame} winner={winner} />;\n};\n\nexport default PlayParty;\n","/Users/thomas/Developer/hackathon_hp/components/Choice/index.js",["176"],[],"import Head from 'next/head';\nimport React, { useEffect } from 'react';\nimport Link from 'next/link';\nimport useSound from 'use-sound';\nimport { Api } from '@/api';\nimport { Router } from '@/router';\nimport { useRouter } from 'next/router';\nimport { toast } from 'react-toastify';\nimport {SplitChars, Tween} from \"react-gsap\";\nimport UserBadge from \"../UserBadge/UserBadge\";\n\nconst Choice = ({ setUser, user }) => {\n  const router = useRouter();\n  const soundUrl = '/sounds/button1.wav';\n\n  const [play, { stop }] = useSound(soundUrl, { volume: 0.4 });\n  const onClickLaunchSound = () => {\n    play();\n  };\n\n  useEffect(() => {\n    // REDIRECT IF NOT LOGGED\n    if (!Api.isLoggedUser()) router.push(Router.getRoutes().LOGIN.slug);\n  }, []);\n  \n  return (\n    <>\n      <main>\n        <section className={'choice'}>\n          <aside className={'choice-container'}>\n            <div className=\"choice-container-title\">\n              <h1 className={'text-100 text-Harry text-yellow'}>\n                <Tween\n                    from={{ opacity: '0', scale: '0.4' }}\n                    to={{ opacity: '100%', scale: '1' }}\n                    ease=\"expo.out()\"\n                    duration={6}\n                    stagger={0.1}\n                >\n                  <SplitChars\n                      wrapper={<span style={{ display: 'inline-block' }} />}\n                  >\n                    Fait ton choix\n                  </SplitChars>\n                </Tween>\n              </h1>\n              <h1 className={'text-100 text-Harry text-yellow text-blur'}>\n                <Tween\n                    from={{ opacity: '0', scale: '0.4' }}\n                    to={{ opacity: '100%', scale: '1' }}\n                    ease=\"expo.out()\"\n                    duration={6}\n                    stagger={0.1}\n                >\n                  <SplitChars\n                      wrapper={<span style={{ display: 'inline-block' }} />}\n                  >\n                    Fait ton choix\n                  </SplitChars>\n                </Tween>\n              </h1>\n            </div>\n            <UserBadge user={user} setUser={setUser}/>\n            <div className={\"choice-container-buttons\"}>\n              <Link\n                  href={'/create-party'}\n                  className={'btn-reset btn-yellow'}\n                  onClick={(e) => onClickLaunchSound()}\n              >\n                Creer une partie\n              </Link>\n              <Link\n                  href={'/join-party'}\n                  className={'btn-reset btn-yellow'}\n                  onClick={(e) => onClickLaunchSound()}\n              >\n                Rejoindre une partie\n              </Link>\n            </div>\n          </aside>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default Choice;\n","/Users/thomas/Developer/hackathon_hp/components/Compteur/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/CountDown/index.js",["177","178"],[],"import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n\nexport const MINUTE = 60; // SECONDS\nexport const SECOND = 1000; // MILLISECONDS\nexport const DEFAULT_INIT_TIME = 5 * MINUTE; // 5 MINUTES\n\nconst formatTimer = (time) => {\n  const minutes = Math.trunc(time / MINUTE);\n  const seconds = time - minutes * MINUTE;\n\n  return `${minutes.toString().padStart(2, '0')}:${seconds\n    .toString()\n    .padStart(2, '0')}`;\n};\n\nexport const CountDown = ({\n  time,\n  setTime,\n  setParentState = null,\n  start = true,\n}) => {\n  const [run, setRun] = useState(start);\n  const [initTime, setInitTime] = useState(DEFAULT_INIT_TIME);\n  const [timerInterval, setTimerInterval] = useState(null);\n\n  useEffect(() => {\n    if (run && timerInterval === null) {\n      setInitTime(time);\n      const interval = setInterval(() => {\n        setTime((prev) => prev - 1);\n      }, SECOND);\n\n      setTimerInterval(interval);\n    } else {\n      clearInterval(timerInterval);\n    }\n\n    return () => clearInterval(timerInterval);\n  }, [run]);\n\n  useEffect(() => {\n    if (time <= 0) {\n      setTime(0);\n      setRun(false);\n      if (setParentState) setParentState(true);\n    }\n  }, [time]);\n\n  return (\n    <div\n      className={classNames('count-down', {\n        warning: time < initTime / 2 && time > initTime / 4,\n        dangerous: time < initTime / 4,\n      })}\n    >\n      <p>{formatTimer(time)}</p>\n    </div>\n  );\n};\n","/Users/thomas/Developer/hackathon_hp/components/Default/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/DraggableIngredient/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/DropBlock/index.js",["179"],[],"import React, { useEffect, useRef } from 'react';\nimport { usePosition } from '@/components/Hooks';\n\nexport const DropBlock = ({ cauldron, setDropBoxOffsets }) => {\n  const dropBlockRef = useRef(null);\n  const [dropBoxOffsets] = usePosition(dropBlockRef);\n\n  useEffect(() => {\n    setDropBoxOffsets(dropBoxOffsets);\n  }, [dropBoxOffsets]);\n\n  return (\n    <div className=\"drop-block\" ref={dropBlockRef}>\n      {cauldron.getImgComponent()}\n    </div>\n  );\n};\n","/Users/thomas/Developer/hackathon_hp/components/Home/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/Hooks/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/Icon/icons/plus.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/Icon/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/JoinParty/index.js",["180","181"],[],"import React, { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport useSound from 'use-sound';\nimport { Api } from '@/api';\nimport { Router } from '@/router';\nimport { useRouter } from 'next/router';\nimport { SplitChars, Tween } from 'react-gsap';\nimport UserBadge from '../UserBadge/UserBadge';\n\nconst JoinParty = ({ setUser, user }) => {\n  const router = useRouter();\n\n  const soundUrl = '/sounds/button1.wav';\n\n  const [inputRoomId, setInputRoomId] = useState(0);\n\n  const [play, { stop }] = useSound(soundUrl, { volume: 0.4 });\n  const onClickLaunchSound = () => {\n    play();\n  };\n\n  useEffect(() => {\n    // REDIRECT IF NOT LOGGED\n    if (!Api.isLoggedUser()) router.push(Router.getRoutes().LOGIN.slug);\n  }, []);\n  return (\n    <>\n      <main>\n        <section className={'join'}>\n          <aside className={'join-container'}>\n            <div className={'join-container-top'}>\n              <Link href={'/choice'} className={'join-container-top-back'}>\n                <img src={'images/icons/arrow-left.svg'} alt={'back'} />\n              </Link>\n              <div className={'join-container-top-title'}>\n                <h3 className={'text-50 text-Harry text-yellow'}>\n                  <Tween\n                    from={{ opacity: '0', scale: '0.4' }}\n                    to={{ opacity: '100%', scale: '1' }}\n                    ease=\"expo.out()\"\n                    duration={6}\n                    stagger={0.1}\n                  >\n                    <SplitChars\n                      wrapper={<span style={{ display: 'inline-block' }} />}\n                    >\n                      Rejoins une partie\n                    </SplitChars>\n                  </Tween>\n                </h3>\n                <h3 className={'text-50 text-Harry text-yellow text-blur'}>\n                  <Tween\n                    from={{ opacity: '0', scale: '0.4' }}\n                    to={{ opacity: '100%', scale: '1' }}\n                    ease=\"expo.out()\"\n                    duration={6}\n                    stagger={0.1}\n                  >\n                    <SplitChars\n                      wrapper={<span style={{ display: 'inline-block' }} />}\n                    >\n                      Rejoins une partie\n                    </SplitChars>\n                  </Tween>\n                </h3>\n              </div>\n              <UserBadge user={user} setUser={setUser} />\n            </div>\n            <div className={'join-container-form'}>\n              <form>\n                <div className={'join-container-form-input'}>\n                  <label\n                    htmlFor={'party-code'}\n                    className={'text-20 text-ProzaLibre-SemiBold text-white'}\n                  >\n                    Code la partie :\n                  </label>\n                  <input\n                    type={'number'}\n                    id={'party-code'}\n                    className={'text-20 text-ProzaLibre-SemiBold text-white'}\n                    value={inputRoomId}\n                    onChange={(e) => setInputRoomId(e.target.value)}\n                    required\n                  />\n                </div>\n                <Link\n                  href={`create-party/${inputRoomId}`}\n                  className={'btn-reset btn-yellow'}\n                  onClick={(e) => onClickLaunchSound()}\n                >\n                  Join\n                </Link>\n              </form>\n            </div>\n          </aside>\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default JoinParty;\n","/Users/thomas/Developer/hackathon_hp/components/Login/LoginForm.tsx",["182"],[],"import {ErrorMessage, Field, Form, Formik} from \"formik\";\nimport * as yup from 'yup';\nimport {toast, ToastContainer} from \"react-toastify\";\nimport React, { useEffect } from \"react\";\nimport { Waiting } from '../Waiting';\nimport { Api } from \"@/api\";\nimport { useRouter } from \"next/router\";\nimport { Router } from \"@/router\";\n\n\ninterface MyFormValues {\n    name: string;\n    password: string;\n}\n\n\n\nlet SchemaLogin = yup.object().shape({\n    name: yup.string().required(\"Le nom d'utilisateur est obligatoire pour ce connecter\"),\n    password: yup.string().required(\"Le mot de passe est obligatoire pour ce connecter\"),\n});\n\nexport default function LoginForm({setUser}){\n\n    const router = useRouter();\n\n    // REDIRECT IF LOGGED\n    useEffect(() => {\n      if(Api.isLoggedUser()) router.push(Router.getRoutes().CHOICE.slug)\n    }, [])\n\n\n    const onSubmit = (credentials: MyFormValues) => {\n      Api.loginUser(credentials).then((data) => {\n        if(data.statusCode) {\n          switch (data.message) {\n            case \"Internal server error\":\n              data.message = \"Une erreur est survenue lors de la connexion\";\n              break;\n          }\n          return toast.error(data.message, {\n            icon : \"🧙\",\n            theme :\"light\"\n          })\n        }else if (!data.statusCode){\n        Api.storeUser(data);\n        setUser(data.user);\n        router.push(Router.getRoutes().CHOICE.slug)\n        return toast.success(\"Connexion réussie\", {\n          icon : \"🧙\",\n          theme :\"light\"\n        })\n        }\n      });\n    }\n\n\n    const initialValues: MyFormValues = { name: 'test-32' , password : 'password' };\n    return (<>\n        <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={SchemaLogin}>\n            <Form>\n                <div className={\"form-row\"}>\n                    <label className={\"text-15 text-white text-ProzaLibre-Regular\"}>Nom d&apos;utilisateur</label>\n                    <Field type={\"text\"} name={\"name\"} placeholder={\"Axel\"}/>\n                    <ErrorMessage name={\"name\"} component={\"p\"} className={\"text-error text-ProzaLibre-Regular\"}/>\n                </div>\n                <div className={\"form-row\"}>\n                    <label className={\"text-15 text-white text-ProzaLibre-Regular\"}>Mot de passe</label>\n                    <Field type={\"password\"} name={\"password\"} placeholder={\"Mot de passe\"} />\n                    <ErrorMessage name={\"password\"} component={\"p\"} className={\"text-error text-ProzaLibre-Regular\"}/>\n                </div>\n                <div className={\"form-row-button\"}>\n                    <button type={\"submit\"} className={\"btn-reset btn-yellow\"}>Connexion</button>\n                    <a href={\"#\"} type={\"submit\"} className={\"btn-reset btn-yellow\"}>Inscription</a>\n                </div>\n            </Form>\n        </Formik>\n    </>\n    )\n}\n","/Users/thomas/Developer/hackathon_hp/components/Login/dist/LoginForm.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/Login/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/Party/index.js",["183","184","185","186","187","188","189","190","191","192","193","194"],[],"import React, { useRef, useEffect, useState } from 'react';\nimport { DraggableIngredient } from '@/components/DraggableIngredient';\nimport { DropBlock } from '@/components/DropBlock';\nimport { getShuffledIngredients, Ingredient } from '@/entities/Ingredient';\nimport { getPartyPotions } from '@/entities/Potion';\nimport { Api } from '@/api';\nimport { Router } from '@/router';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { SplitChars, Tween } from 'react-gsap';\nimport { CountDown, DEFAULT_INIT_TIME } from '../CountDown';\nimport { toast } from 'react-toastify';\n\nconst TIME_PENALITY = {\n  INDICE: 20,\n  WRONG_INGREDIENT: 5,\n};\n\nconst INDICE_TIMEOUT = 3000;\n\nexport const Party = ({ user, stopGame, winner }) => {\n  const router = useRouter();\n\n  const [winnerHouse, setWinnerHouse] = useState(\n    user ? user.house.name : 'Ravenclaw'\n  );\n  const [winnerHouseImg, setWinnerHouseImg] = useState(\n    <img src={'/images/' + winnerHouse + '.png'} />\n  );\n\n  const [users, setUsers] = useState([]);\n\n  const [ingredients, setIngredients] = useState([]);\n  const [dropBoxOffsets, setDropBoxOffsets] = useState(null);\n\n  const [finished, setFinished] = useState(false);\n  const [countdownTime, setCountDownTime] = useState(DEFAULT_INIT_TIME);\n\n  // POTIONS\n  const [potions, setPotions] = useState([]);\n  const [currentPotionIndex, setCurrentPotionIndex] = useState(0);\n  const [currentIngredientPotionIndex, setCurrentIngredientPotionIndex] =\n    useState(0);\n\n  useEffect(() => {\n    // REDIRECT IF NOT LOGGED\n    if (!Api.isLoggedUser()) router.push(Router.getRoutes().LOGIN.slug);\n\n    if (!ingredients.length) setIngredients(getShuffledIngredients());\n    if (!potions.length) setPotions(getPartyPotions());\n  }, []);\n\n  /**\n   * @param {Ingredient} ingredient\n   */\n  const dropIngredient = (droppedIngredient) => {\n    // ERROR IF INDICE IS FLIP\n    if (\n      classFlipFirst === 'flip' ||\n      classFlipSecond === 'flip' ||\n      classFlipThird === 'flip'\n    ) {\n      return toast.error('Impossible, vous lisez un indice !', {\n        icon: '❌',\n        theme: 'light',\n        position: 'bottom-center',\n      });\n    }\n\n    // GET NEEDED INGREDIENT\n    const neededIngredient =\n      potions[currentPotionIndex].getIngredients()[\n        currentIngredientPotionIndex\n      ];\n\n    // VERIFY IS DROPPED INGREDIENT IS EQUAL TO NEEDED INGREDIENT\n    const isNeededIngredient = droppedIngredient === neededIngredient;\n\n    // GOOD INGREDIENT\n    if (isNeededIngredient) {\n      // RESET CAN TAKE INDICE\n      setCanTakeIndice(true);\n      resetAllClassFlip();\n\n      toast.success('Ingrédient ajouté', {\n        icon: '🧪',\n        theme: 'light',\n        position: 'bottom-center',\n      });\n\n      // REMOVE INGREDIENT FROM LIST\n      setIngredients(\n        ingredients.filter((ingredient) => droppedIngredient !== ingredient)\n      );\n\n      // IF NOT LAST NEEDED INGREDIENT OF CURRENT POTION\n      if (\n        currentIngredientPotionIndex <\n        potions[currentPotionIndex].getIngredients().length - 1\n      ) {\n        setCurrentIngredientPotionIndex((prev) => prev + 1);\n      } else {\n        // IF ITS LAST NEEDED INGREDIENT OF CURRENT POSTION\n        // GO TO NEXT POTION\n        if (currentPotionIndex < potions.length - 1) {\n          setCurrentPotionIndex((prev) => prev + 1);\n          setCurrentIngredientPotionIndex(0);\n          setIngredients(getShuffledIngredients());\n          toast.success('Bien joué, potion suivante !', {\n            icon: '🧪',\n            theme: 'light',\n            position: 'bottom-center',\n          });\n        } else {\n          // IF LAST POTION FINISH GAME\n          setFinished(true);\n        }\n      }\n    } else {\n      // BAD INGREDIENT\n      setCountDownTime((prev) => prev - TIME_PENALITY.WRONG_INGREDIENT);\n      toast.error('Mauvais ingrédient (- 5 sec)', {\n        icon: '❌',\n        theme: 'light',\n        position: 'bottom-center',\n      });\n    }\n  };\n\n  const [indices, setIndices] = useState([\n    { indiceTaken: false },\n    { indiceTaken: false },\n    { indiceTaken: false },\n  ]);\n\n  const [classFlipFirst, setClassFlipFirst] = useState('');\n  const [classFlipSecond, setClassFlipSecond] = useState('');\n  const [classFlipThird, setClassFlipThird] = useState('');\n  const [canTakeIndice, setCanTakeIndice] = useState(true);\n\n  const resetAllClassFlip = () => {\n    setClassFlipSecond('');\n    setClassFlipFirst('');\n    setClassFlipThird('');\n  };\n\n  const launchIndices = (index) => {\n    // NOT ENOUGH TIME\n    if (countdownTime <= TIME_PENALITY.INDICE + 10) {\n      return toast.error('Tu nas plus le temps !', {\n        icon: '❌',\n        theme: 'light',\n        position: 'bottom-center',\n      });\n    }\n\n    let findIndice = indices.find((item, indexItem) => indexItem === index);\n    if (findIndice.indiceTaken === false && canTakeIndice) {\n      setCountDownTime((prev) => prev - TIME_PENALITY.INDICE);\n      /*Set to true if already taken*/\n      let indicesCopy = [...indices];\n      findIndice.indiceTaken = true;\n      setIndices(indicesCopy);\n      if (index === 0) {\n        setClassFlipFirst('flip');\n      } else if (index === 1) {\n        setClassFlipSecond('flip');\n      } else if (index === 2) {\n        setClassFlipThird('flip');\n      }\n      setCanTakeIndice(false);\n      setTimeout(() => {\n        resetAllClassFlip();\n      }, INDICE_TIMEOUT);\n    }\n  };\n\n  useEffect(() => {\n    if (finished) stopGame();\n  }, [finished]);\n\n  useEffect(() => {\n    if (winner) {\n      setFinished(true);\n      toast.success(`${winner.name} est le grand gagnant !`, {\n        icon: '👊',\n        theme: 'light',\n        position: 'bottom-right',\n      });\n    }\n  }, [winner]);\n\n  return (\n    <>\n      {finished ? (\n        <section className={'success ' + winnerHouse}>\n          <aside className={'success-container'}>\n            <div className={'success-container-title'}>\n              <h1 className={'text-50 text-Harry text-yellow'}>\n                <Tween\n                  from={{ opacity: '0', scale: '0.4' }}\n                  to={{ opacity: '100%', scale: '1' }}\n                  ease=\"expo.out()\"\n                  duration={6}\n                  stagger={0.1}\n                >\n                  <SplitChars\n                    wrapper={<span style={{ display: 'inline-block' }} />}\n                  >\n                    Victoire de la maison\n                  </SplitChars>\n                </Tween>\n              </h1>\n              <h1 className={'text-100 text-Harry text-yellow'}>\n                <Tween\n                  from={{ opacity: '0', scale: '0.4' }}\n                  to={{ opacity: '100%', scale: '1' }}\n                  ease=\"expo.out()\"\n                  duration={6}\n                  stagger={0.1}\n                >\n                  <SplitChars\n                    wrapper={<span style={{ display: 'inline-block' }} />}\n                  >\n                    {winnerHouse}\n                  </SplitChars>\n                </Tween>\n              </h1>\n            </div>\n            <div className={'success-container-logo'}>{winnerHouseImg}</div>\n\n            {winner && (\n              <p\n                className={\n                  'success-container-logo-name text-30 text-ProzaLibre-SemiBold text-yellow'\n                }\n              >\n                Le joueur {winner.name} a gagné !\n              </p>\n            )}\n            <ul className={'success-container-content'}>\n              {users.map((item, index) => {\n                return (\n                  <li\n                    key={index}\n                    className={'text-30 text-white text-ProzaLibre-Regular'}\n                  >\n                    <img src={'/images/' + item.house + '.png'} />\n                    {item.name} - {item.potionDone} / 3\n                  </li>\n                );\n              })}\n            </ul>\n            <div className={'success-container-button'}>\n              <Link href={'/choice'} className={'btn-reset btn-yellow'}>\n                Rejouer\n              </Link>\n            </div>\n          </aside>\n        </section>\n      ) : (\n        <div className=\"party\">\n          <CountDown\n            time={countdownTime}\n            setTime={setCountDownTime}\n            setParentState={setFinished}\n          />\n          {potions && potions[currentPotionIndex] && (\n            <>\n              <div className=\"party__potion-name\">\n                <h1>\n                  Potion ({currentPotionIndex + 1}/{potions.length}):{' '}\n                  {potions[currentPotionIndex].getName()}\n                </h1>\n                {potions[currentPotionIndex].getIngredients()[\n                  currentIngredientPotionIndex\n                ] && (\n                  <p>\n                    Ingrédient requis:{' '}\n                    <span>\n                      {\n                        potions[currentPotionIndex].getIngredients()[\n                          currentIngredientPotionIndex\n                        ].name\n                      }\n                    </span>\n                  </p>\n                )}\n              </div>\n              <DropBlock\n                cauldron={potions[currentPotionIndex].getCauldron()}\n                setDropBoxOffsets={setDropBoxOffsets}\n              />\n            </>\n          )}\n          <div className={'indices'}>\n            <div className={'indices-container'}>\n              {indices.map((item, index) => {\n                if (index === 0) {\n                  return (\n                    <div\n                      onClick={(e) => launchIndices(index)}\n                      key={index}\n                      className={\n                        'indices-container-item first ' +\n                        classFlipFirst +\n                        (canTakeIndice ? '' : ' inactive') +\n                        (item.indiceTaken === true ? ' inactive' : '')\n                      }\n                    >\n                      <div className={'indices-container-item-image'}></div>\n                      <div className={'indices-container-item-background '}>\n                        <img src={'/images/carte.png'} />\n                      </div>\n                      <div className={'content'}>\n                        {/* {item.img && item.img} */}\n                        {potions &&\n                          potions[currentPotionIndex] &&\n                          potions[currentPotionIndex].getIngredients()[\n                            currentIngredientPotionIndex\n                          ] &&\n                          potions[currentPotionIndex]\n                            .getIngredients()\n                            [currentIngredientPotionIndex].getImgComponent()}\n                      </div>\n                    </div>\n                  );\n                } else if (index === 1) {\n                  return (\n                    <div\n                      onClick={(e) => launchIndices(index)}\n                      key={index}\n                      className={\n                        'indices-container-item second ' +\n                        classFlipSecond +\n                        (canTakeIndice ? '' : ' inactive') +\n                        (item.indiceTaken === true ? ' inactive' : '')\n                      }\n                    >\n                      <div className={'indices-container-item-image'}></div>\n                      <div className={'indices-container-item-background'}>\n                        <img src={'/images/carte.png'} />\n                      </div>\n                      <div className={'content'}>\n                        {/* {item.img && item.img} */}\n                        {potions &&\n                          potions[currentPotionIndex] &&\n                          potions[currentPotionIndex].getIngredients()[\n                            currentIngredientPotionIndex\n                          ] &&\n                          potions[currentPotionIndex]\n                            .getIngredients()\n                            [currentIngredientPotionIndex].getImgComponent()}\n                      </div>\n                    </div>\n                  );\n                } else if (index === 2) {\n                  return (\n                    <div\n                      onClick={(e) => launchIndices(index)}\n                      key={index}\n                      className={\n                        'indices-container-item third ' +\n                        classFlipThird +\n                        (canTakeIndice ? '' : ' inactive') +\n                        (item.indiceTaken === true ? ' inactive' : '')\n                      }\n                    >\n                      <div className={'indices-container-item-image'}></div>\n                      <div className={'indices-container-item-background'}>\n                        <img src={'/images/carte.png'} />\n                      </div>\n                      <div className={'content'}>\n                        {/* {item.img && item.img} */}\n                        {potions &&\n                          potions[currentPotionIndex] &&\n                          potions[currentPotionIndex].getIngredients()[\n                            currentIngredientPotionIndex\n                          ] &&\n                          potions[currentPotionIndex]\n                            .getIngredients()\n                            [currentIngredientPotionIndex].getImgComponent()}\n                      </div>\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          </div>\n          <ul className=\"ingredients-block\">\n            {ingredients.map((ingredient, index) => (\n              <DraggableIngredient\n                dropBoxOffsets={dropBoxOffsets}\n                ingredient={ingredient}\n                dropIngredient={dropIngredient}\n                key={index}\n              />\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n","/Users/thomas/Developer/hackathon_hp/components/UserBadge/UserBadge.js",["195","196"],[],"import React from 'react';\nimport ReactParallaxTilt from 'react-parallax-tilt';\nimport { toast } from 'react-toastify';\nimport { Api } from '../../api';\nimport { Router } from '@/router';\nimport { useRouter } from 'next/router';\n\nconst UserBadge = ({ user, setUser }) => {\n  const router = useRouter();\n\n  const logout = () => {\n    const result = Api.LogoutUser(setUser);\n    if (result.statusCode !== 200) {\n      return toast.error(result.message, {\n        icon: '🧙',\n        theme: 'light',\n      });\n    }\n\n    toast.success(result.message, {\n      icon: '🧙',\n      theme: 'light',\n    });\n\n    router.push(Router.getRoutes().HOME);\n  };\n\n  return (\n    <div className={'position-badge'}>\n      <ReactParallaxTilt\n        style={{ width: 'fit-content' }}\n        reset={true}\n        tiltReverse={true}\n        glareEnable={true}\n        glareReverse={false}\n        glareColor={'#FFF9F0'}\n        scale={1.2}\n        transitionEasing={'cubic-bezier(.03,.98,.52,.99)'}\n        glareBorderRadius={'20px'}\n        tiltMaxAngleX={40}\n        tiltMaxAngleY={40}\n      >\n        <div className={'user-badge'}>\n          <div className={'user-badge-container'}>\n            <div className={'info'}>\n              {user ? <img src={'/images/' + user.house.name + '.png'} /> : ''}\n              {user ? (\n                <p className={'text-20 text-yellow text-ProzaLibre-SemiBold'}>\n                  {user.name}\n                </p>\n              ) : (\n                ''\n              )}\n            </div>\n            <div className={'btn-logout'}>\n              <button\n                className={'btn-reset btn-red btn-little'}\n                onClick={() => logout()}\n              >\n                Deconnexion\n              </button>\n            </div>\n          </div>\n        </div>\n      </ReactParallaxTilt>\n    </div>\n  );\n};\n\nexport default UserBadge;\n","/Users/thomas/Developer/hackathon_hp/components/ViewRoom/index.js",["197","198"],[],"import React, { useEffect } from 'react';\nimport Link from 'next/link';\nimport useSound from 'use-sound';\nimport { Api } from '@/api';\nimport { Router } from '@/router';\nimport { useRouter } from 'next/router';\nimport { SplitChars, Tween } from 'react-gsap';\nimport UserBadge from '../UserBadge/UserBadge';\n\nexport const ViewRoom = ({ setUser, user, room, partyCanStart, startGame }) => {\n  const router = useRouter();\n\n  const soundUrl = '/sounds/button1.wav';\n\n  const [play, { stop }] = useSound(soundUrl, { volume: 0.4 });\n  const onClickLaunchSound = () => {\n    play();\n  };\n\n  useEffect(() => {\n    // REDIRECT IF NOT LOGGED\n    if (!Api.isLoggedUser()) router.push(Router.getRoutes().LOGIN.slug);\n  }, []);\n\n  return (\n    <>\n      <main>\n        <section className={'join'}>\n          <aside className={'join-container'}>\n            <div className={'join-container-top'}>\n              <Link href={'/choice'} className={'join-container-top-back'}>\n                <img src={'../images/icons/arrow-left.svg'} alt={'back'} />\n              </Link>\n              <div className={'join-container-top-title'}>\n                <h3 className={'text-50 text-Harry text-yellow'}>\n                  <Tween\n                    from={{ opacity: '0', scale: '0.4' }}\n                    to={{ opacity: '100%', scale: '1' }}\n                    ease=\"expo.out()\"\n                    duration={6}\n                    stagger={0.1}\n                  >\n                    <SplitChars\n                      wrapper={<span style={{ display: 'inline-block' }} />}\n                    >\n                      Infos de la Room\n                    </SplitChars>\n                  </Tween>\n                </h3>\n                <h3 className={'text-50 text-Harry text-yellow text-blur'}>\n                  <Tween\n                    from={{ opacity: '0', scale: '0.4' }}\n                    to={{ opacity: '100%', scale: '1' }}\n                    ease=\"expo.out()\"\n                    duration={6}\n                    stagger={0.1}\n                  >\n                    <SplitChars\n                      wrapper={<span style={{ display: 'inline-block' }} />}\n                    >\n                      Infos de la Room\n                    </SplitChars>\n                  </Tween>\n                </h3>\n              </div>\n              <UserBadge user={user} setUser={setUser} />\n            </div>\n            <div className={'join-container-form'}>\n              <p className=\"text-20 text-white\">\n                Le créateur de la partie est: {room.owner.name}\n              </p>\n              <br />\n              <p className=\"text-20 text-Harry text-yellow\">\n                Liste des joueurs:\n              </p>\n              <ul>\n                {room.users.map((user, index) => (\n                  <li className=\"text-white\" key={index}>\n                    {user.name}\n                  </li>\n                ))}\n              </ul>\n              {partyCanStart && user && user.id === room.owner.id && (\n                <>\n                  <br />\n                  <button onClick={startGame} className=\"text-40 tex-yellow\">\n                    Commencer\n                  </button>\n                </>\n              )}\n            </div>\n          </aside>\n        </section>\n      </main>\n    </>\n  );\n};\n","/Users/thomas/Developer/hackathon_hp/components/Waiting/index.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/buttons/PrimaryButton.tsx",[],[],"/Users/thomas/Developer/hackathon_hp/components/buttons/dist/PrimaryButton.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/inputs/TextInput.tsx",[],[],"/Users/thomas/Developer/hackathon_hp/components/inputs/dist/TextInput.js",[],[],"/Users/thomas/Developer/hackathon_hp/components/sparkles/sparkles.tsx",[],[],"/Users/thomas/Developer/hackathon_hp/pages/[[...slug]].js",[],[],{"ruleId":"199","severity":1,"message":"200","line":31,"column":6,"nodeType":"201","endLine":31,"endColumn":8,"suggestions":"202"},{"ruleId":"199","severity":1,"message":"203","line":67,"column":6,"nodeType":"201","endLine":67,"endColumn":22,"suggestions":"204"},{"ruleId":"199","severity":1,"message":"205","line":91,"column":6,"nodeType":"201","endLine":91,"endColumn":26,"suggestions":"206"},{"ruleId":"199","severity":1,"message":"200","line":21,"column":6,"nodeType":"201","endLine":21,"endColumn":8,"suggestions":"207"},{"ruleId":"199","severity":1,"message":"208","line":42,"column":6,"nodeType":"201","endLine":42,"endColumn":14,"suggestions":"209"},{"ruleId":"199","severity":1,"message":"210","line":24,"column":6,"nodeType":"201","endLine":24,"endColumn":8,"suggestions":"211"},{"ruleId":"199","severity":1,"message":"200","line":29,"column":6,"nodeType":"201","endLine":29,"endColumn":8,"suggestions":"212"},{"ruleId":"199","severity":1,"message":"203","line":70,"column":6,"nodeType":"201","endLine":70,"endColumn":22,"suggestions":"213"},{"ruleId":"199","severity":1,"message":"210","line":24,"column":6,"nodeType":"201","endLine":24,"endColumn":8,"suggestions":"214"},{"ruleId":"199","severity":1,"message":"215","line":40,"column":6,"nodeType":"201","endLine":40,"endColumn":11,"suggestions":"216"},{"ruleId":"199","severity":1,"message":"217","line":48,"column":6,"nodeType":"201","endLine":48,"endColumn":12,"suggestions":"218"},{"ruleId":"199","severity":1,"message":"219","line":10,"column":6,"nodeType":"201","endLine":10,"endColumn":22,"suggestions":"220"},{"ruleId":"199","severity":1,"message":"210","line":25,"column":6,"nodeType":"201","endLine":25,"endColumn":8,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":33,"column":17,"nodeType":"224","endLine":33,"endColumn":73},{"ruleId":"199","severity":1,"message":"210","line":30,"column":8,"nodeType":"201","endLine":30,"endColumn":10,"suggestions":"225"},{"ruleId":"222","severity":1,"message":"223","line":28,"column":5,"nodeType":"224","endLine":28,"endColumn":52},{"ruleId":"226","severity":1,"message":"227","line":28,"column":5,"nodeType":"224","endLine":28,"endColumn":52},{"ruleId":"199","severity":1,"message":"228","line":51,"column":6,"nodeType":"201","endLine":51,"endColumn":8,"suggestions":"229"},{"ruleId":"199","severity":1,"message":"230","line":180,"column":6,"nodeType":"201","endLine":180,"endColumn":16,"suggestions":"231"},{"ruleId":"222","severity":1,"message":"223","line":248,"column":21,"nodeType":"224","endLine":248,"endColumn":67},{"ruleId":"226","severity":1,"message":"227","line":248,"column":21,"nodeType":"224","endLine":248,"endColumn":67},{"ruleId":"222","severity":1,"message":"223","line":313,"column":25,"nodeType":"224","endLine":313,"endColumn":58},{"ruleId":"226","severity":1,"message":"227","line":313,"column":25,"nodeType":"224","endLine":313,"endColumn":58},{"ruleId":"222","severity":1,"message":"223","line":342,"column":25,"nodeType":"224","endLine":342,"endColumn":58},{"ruleId":"226","severity":1,"message":"227","line":342,"column":25,"nodeType":"224","endLine":342,"endColumn":58},{"ruleId":"222","severity":1,"message":"223","line":371,"column":25,"nodeType":"224","endLine":371,"endColumn":58},{"ruleId":"226","severity":1,"message":"227","line":371,"column":25,"nodeType":"224","endLine":371,"endColumn":58},{"ruleId":"222","severity":1,"message":"223","line":46,"column":23,"nodeType":"224","endLine":46,"endColumn":74},{"ruleId":"226","severity":1,"message":"227","line":46,"column":23,"nodeType":"224","endLine":46,"endColumn":74},{"ruleId":"199","severity":1,"message":"210","line":23,"column":6,"nodeType":"201","endLine":23,"endColumn":8,"suggestions":"232"},{"ruleId":"222","severity":1,"message":"223","line":32,"column":17,"nodeType":"224","endLine":32,"endColumn":76},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socketInitializer'. Either include it or remove the dependency array.","ArrayExpression",["233"],"React Hook useEffect has a missing dependency: 'getRoom'. Either include it or remove the dependency array.",["234"],"React Hook useEffect has missing dependencies: 'getRoom', 'roomId', and 'router'. Either include them or remove the dependency array.",["235"],["236"],"React Hook useEffect has a missing dependency: 'createParty'. Either include it or remove the dependency array.",["237"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["238"],["239"],["240"],["241"],"React Hook useEffect has missing dependencies: 'setTime', 'time', and 'timerInterval'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["242"],"React Hook useEffect has missing dependencies: 'setParentState' and 'setTime'. Either include them or remove the dependency array. If 'setTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],"React Hook useEffect has a missing dependency: 'setDropBoxOffsets'. Either include it or remove the dependency array. If 'setDropBoxOffsets' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["244"],["245"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",["246"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'ingredients.length', 'potions.length', and 'router'. Either include them or remove the dependency array.",["247"],"React Hook useEffect has a missing dependency: 'stopGame'. Either include it or remove the dependency array. If 'stopGame' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["248"],["249"],{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"250","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"250","fix":"261"},{"desc":"252","fix":"262"},{"desc":"259","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"259","fix":"270"},{"desc":"259","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"259","fix":"276"},"Update the dependencies array to be: [socketInitializer]",{"range":"277","text":"278"},"Update the dependencies array to be: [socket, roomId, getRoom]",{"range":"279","text":"280"},"Update the dependencies array to be: [room, user, socket, roomId, getRoom, router]",{"range":"281","text":"282"},{"range":"283","text":"278"},"Update the dependencies array to be: [createParty, socket]",{"range":"284","text":"285"},"Update the dependencies array to be: [router]",{"range":"286","text":"287"},{"range":"288","text":"278"},{"range":"289","text":"280"},{"range":"290","text":"287"},"Update the dependencies array to be: [run, setTime, time, timerInterval]",{"range":"291","text":"292"},"Update the dependencies array to be: [setParentState, setTime, time]",{"range":"293","text":"294"},"Update the dependencies array to be: [dropBoxOffsets, setDropBoxOffsets]",{"range":"295","text":"296"},{"range":"297","text":"287"},{"range":"298","text":"287"},"Update the dependencies array to be: [ingredients.length, potions.length, router]",{"range":"299","text":"300"},"Update the dependencies array to be: [finished, stopGame]",{"range":"301","text":"302"},{"range":"303","text":"287"},[833,835],"[socketInitializer]",[1627,1643],"[socket, roomId, getRoom]",[2273,2293],"[room, user, socket, roomId, getRoom, router]",[521,523],[943,951],"[createParty, socket]",[755,757],"[router]",[824,826],[1727,1743],[736,738],[1043,1048],"[run, setTime, time, timerInterval]",[1191,1197],"[setParentState, setTime, time]",[321,337],"[dropBoxOffsets, setDropBoxOffsets]",[736,738],[830,832],[1748,1750],"[ingredients.length, potions.length, router]",[5450,5460],"[finished, stopGame]",[710,712]]